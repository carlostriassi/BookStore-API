@page "/Register"
@using Models
@using Contracts 

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navMan

<h3 class="card-title">Register Now</h3>
@if (!response)
{
    <ErrorMessage Message="Something went wrong with the registration attempt"></ErrorMessage>
}
   
<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="email">Email address</label>
            <InputText id="email" class="form-control" @bind-Value="Model.EmailAddress" />
            <ValidationMessage For="@(() => Model.EmailAddress)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="confirmpassword">Confirm Password</label>
            <InputText id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
            <ValidationMessage For="@(() => Model.ConfirmPassword)"></ValidationMessage>
        </div>
        
        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>

</div>

@code {

    private RegistrationModel Model= new RegistrationModel();
    bool response  = true;
    private async Task HandleRegistration()
    {
        response = await _authRepo.Register(Model);

        if (response)
        {
            _navMan.NavigateTo("/login");
        }
       
    }

}
